// Check ubuntu version 
lsb_release -a

// Install Nginx (Linux-based systems)
sudo apt update
sudo apt install nginx
nginx -v

sudo nginx -t
sudo systemctl status nginx
sudo systemctl stop nginx
sudo systemctl restart nginx
sudo systemctl reload nginx

// Adding a site configuration file for your project in Nginx
sudo nano /etc/nginx/sites-available/sliprecs // copy nginx.txt file 
sudo ln -s /etc/nginx/sites-available/sliprecs /etc/nginx/sites-enabled/


// Install nodejs and npm and check node version
sudo apt update && sudo apt upgrade -y
sudo apt install -y curl software-properties-common
curl -fsSL https://deb.nodesource.com/setup_current.x | sudo -E bash -
sudo apt install -y nodejs
node -v
npm -v


// Install PM2 to manage your Node.js application
sudo npm install -g pm2
npm install -g npm@11.0.0 (if specific version)
pm2 -v

// Install git or check version
sudo apt update
sudo apt install git -y
git --version


// Generate an SSH Key -> https://chatgpt.com/c/677d93a0-21e4-800b-a5b9-cb9bac2048e8
ls ~/.ssh

ssh-keygen -t rsa -b 4096 -C "harpnine@gmail.com"
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_rsa
cat ~/.ssh/id_rsa.pub
ssh -T git@github.com

// Clone git repository to /var/www
git clone git@github.com:harpreetsinghdt/sliprecs.git

// Create webhook file on /sliprecs/webhook.js and copy paste content of file from resources folder and provide permissions
sudo chmod -R 755 /var/www/sliprecs/webhook.js

// Excute the webhook with pm2 process manager to run on git push action 
pm2 start /sliprecs/webhook.js
pm2 stop /sliprecs/webhook.js


// Create deployment file at /sliprecs/deploy.sh and copy paste content of file from resources folder

// Start backend server 
pm2 start sliprecs/backend/server.js --name sliprecs-backend





#################################################################





sudo chmod -R 755 /var/www/sliprecs/frontend/dist
sudo chown -R www-data:www-data /var/www/sliprecs/frontend/dist

sudo chmod -R 755 /var/www/sliprecs/pm2.config.json

sudo nano /etc/nginx/sites-available/default


// Check if the backend is running
ps aux | grep <your_backend_process>
ps aux | grep sliprecs-backend

// Test backend connectivity from the server
curl http://127.0.0.1:<backend_port>
curl http://127.0.0.1:5000

// Check all running port 
sudo netstat -tuln
sudo kill -9 4147  # Replace 12345 with the actual PID

// Check if port 3000 is being used by Nginx:
sudo ss -tuln | grep 3000
sudo netstat -tulnp | grep 3000



curl -X POST http://127.0.0.1:3000/webhook -d '{"test":"data"}' -H "Content-Type: application/json"

sudo netstat -tuln | grep 5000
sudo ufw status
sudo ufw allow 5000


sudo chown -R www-data:www-data /var/www/html

// Adjust user/group based on the server user running Flask (e.g., 'www-data')
sudo chown -R www-data:www-data /var/www/sliprecs
sudo chown -R root /var/www/sliprecs

// Ensure files are executable
sudo chmod -R 755 /var/www/sliprecs

cat pm2.config.json
cat webhook.py
cat deploy.sh

nano pm2.config.json
nano webhook.py
nano deploy.sh


// check user permissions
ssh -T git@github.com
sudo -u <webhook_user> ssh -T git@github.com
sudo -u www-data ssh -T git@github.com
sudo -u root ssh -T git@github.com


sudo -u www-data ssh-keygen -t rsa -b 4096 -C "harpnine@gmail.com" -f /var/www/.ssh/id_rsa


sudo cp /root/.ssh/id_ed25519 /var/www/.ssh/
sudo chown -R www-data:www-data /var/www/.ssh
sudo chmod 600 /var/www/.ssh/id_ed25519


eval "$(ssh-agent -s)"
ssh-add /var/www/.ssh/id_ed25519

sudo -u www-data ssh-keygen -t rsa -b 4096 -C "harpnine@gmail.com"

sudo -u www-data bash /var/www/sliprecs/deploy.sh

sudo chown -R www-data:www-data /var/www

systemctl status deploy.sh

sudo -u root git pull origin main

sudo -u www-data git status
sudo -u www-data git pull origin main
sudo -u www-data git pull origin main --verbose


sudo -u www-data npm install --verbose
sudo -u www-data pm2 restart sliprecs-backend


// This will show if there is any Git process running.
ps aux | grep git


git config --global --add safe.directory /var/www/sliprecs

sudo -u www-data git config --global --add safe.directory /var/www/sliprecs

sudo -u www-data git config --global --get-all safe.directory
sudo -u www-data git config --list --show-origin
sudo -u www-data bash /var/www/sliprecs/deploy.sh

npm run dev

sudo kill -9 11494  # Replace 1234 with the actual PID

// Process manager 
pm2 list
pm2 logs sliprecs-backend
pm2 stop webhook-flask
pm2 restart webhook-flask
pm2 delete webhook-flask
pm2 show webhook-flask

pm2 show sliprecs-backend
pm2 restart sliprecs-backend

pm2 start sliprecs/backend/server.js --name sliprecs-backend
pm2 start -f sliprecs/backend/server.js --name sliprecs-backend

pm2 start backend/server.js --name sliprecs-backend --env production

pm2 start backend/server.js --name sliprecs-backend --env production -- NODE_ENV=production

pm2 start ecosystem.config.js --env production


pm2 start /sliprecs/webhook.js --name git-webhook

NODE_ENV=production pm2 restart sliprecs-backend

pm2 examples

sudo cat /etc/nginx/sites-available/default

ps aux | grep 'vite'

ps aux | grep 'node'

cat /var/www/sliprecs/frontend/.env
cat /var/www/sliprecs/backend/.env

curl http://localhost:5001

sudo chmod -R 755 /var/www/sliprecs/backend/uploads
sudo chown -R www-data:www-data /var/www/sliprecs/backend/uploads

sudo chmod -R 755 /var/www/sliprecs/backend/.env.production
sudo chown -R www-data:www-data /var/www/sliprecs/backend/.env.production

sudo chmod -R 755 /var/www/sliprecs/backend/.env
sudo chown -R www-data:www-data /var/www/sliprecs/backend/.env

sudo chmod -R 755 1732219459916.jpeg
sudo chown -R www-data:www-data 1732219459916.jpeg

rm -rf /var/www/sliprecs/backend/uploads/receipts/*
rm -ri /var/www/sliprecs/backend/uploads/receipts/* y or n 


/* mongodb production */
sudo systemctl status mongod
sudo netstat -tuln | grep 27017

npm install -g npm@10.9.1

npm install --force

nvm install --lts
nvm use --lts


/root/.nvm/versions/node/v22.11.0/bin/node
/usr/bin/nodejs
sudo apt remove nodejs
sudo apt purge nodejs


export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # Load nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # Load nvm bash_completion

nvm ls

bash -x deploy.sh
sudo chown -R www-data:www-data /var/www/sliprecs


// Log into the MongoDB shell:
mongosh
show dbs
use your_database_name
show collections
db.collection_name.find()
db.users.find()
db.collection_name.find().pretty()
db.users.find().pretty()
db.receipts.find().pretty()

db.collection_name.countDocuments()
db.receipts.countDocuments()

db.collection_name.find({}, { field1: 1, field2: 1 })
db.collection_name.find({ field: "value" }).pretty()
db.collection_name.find().limit(10).pretty()
db.collection_name.find().sort({ field: 1 }).pretty()


// To install MongoDB on a Hostinger VPS via SSH, follow these steps:
https://www.hostinger.com/tutorials/how-to-install-mongodb-on-ubuntu/

sudo apt-get install -y gnupg curl

curl -fsSL https://pgp.mongodb.com/server-7.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg --dearmor

echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list

sudo apt update

sudo apt install -y mongodb-org


sudo systemctl start mongod
// After the installation, run MongoDB Community Edition by entering the following:
sudo systemctl start mongod

// The systemctl command is essential for MongoDB service management. For example, if you encounter an error, run the following to reboot running services and try starting the DBMS again:
sudo systemctl daemon-reload

// To find out whether MongoDB database server loaded properly, check its status with this command:
sudo systemctl status mongod

// By default, the service doesnâ€™t start at boot. To automatically load it at startup, enable MongoDB using the following command. :
sudo systemctl enable mongod

sudo nano /etc/mongod.conf


module.exports = {
  apps: [
    {
      name: "sliprecs-backend",
      script: "backend/server.js",
      env: {
        NODE_ENV: "development",
      },
      env_production: {
        NODE_ENV: "production",
        PORT: 5000,
        MONGO_URI: "mongodb://localhost:27017/sliprecs",
        JWT_SECRET:"millionaire"
      },
    },
  ],
};